{"version":3,"sources":["assets/checked.svg","assets/plus.svg","contexts/TodoContext.tsx","components/SingleTodo.tsx","contants/colors.ts","components/TodosList.tsx","components/styled/forms/Input.ts","components/styled/forms/Label.ts","components/styled/forms/InputGroup.ts","components/styled/forms/Button.ts","components/Modal.tsx","components/styled/forms/CircleButton.tsx","components/TodoForm.tsx","components/Header.tsx","components/Layout.tsx","components/GlobalStyles.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Actions","TodoStateContext","createContext","TodoDispatchContext","undefined","todoReducer","state","action","type","addTodo","todos","payload","window","localStorage","setItem","JSON","stringify","removeTodo","filter","todo","id","toggleDone","map","isDone","TodoProvider","children","useReducer","parse","getItem","dispatch","Provider","value","useTodoDispatch","useContext","SingleTodo","handleToggleDone","Wrapper","Title","onClick","title","Image","src","checked","alt","Circle","Colors","styled","div","h2","props","img","span","TodosList","length","key","Info","dark","Input","input","primary","Label","label","white","InputGroup","Button","button","Modal","isOpen","onClose","el","useRef","document","createElement","useEffect","elCopy","body","appendChild","current","removeChild","ReactDOM","createPortal","Inner","Close","CircleButton","plus","TodoForm","useState","setTitle","isModalOpen","setModalOpen","Form","data-testid","onSubmit","e","preventDefault","uuid","onChange","target","placeholder","required","htmlFor","Plus","form","Header","date","Date","day","getDate","month","toLocaleString","year","getFullYear","dayName","toLocaleDateString","weekday","Left","Day","Month","DayName","p","Layout","Container","GlobalStyles","GlobalStyle","createGlobalStyle","lightGray","App","Boolean","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bae6947e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checked.facd84e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.223a3e98.svg\";","import React, { createContext, useReducer, useContext } from 'react';\n\nimport { Todo } from '../types';\n\nexport enum Actions {\n  addTodo,\n  removeTodo,\n  toggleDone\n}\n\ntype AddTodoAction = {\n  type: Actions.addTodo;\n  payload: Todo;\n};\n\ntype RemoveTodoAction = {\n  type: Actions.removeTodo;\n  payload: string;\n};\n\ntype ToggleDoneAction = {\n  type: Actions.toggleDone;\n  payload: string;\n};\n\ntype Action = AddTodoAction | RemoveTodoAction | ToggleDoneAction;\ntype Dispatch = (action: Action) => void;\ntype State = Todo[];\ntype TodoProviderProps = { children: React.ReactNode };\n\nconst TodoStateContext = createContext<State>([]);\nconst TodoDispatchContext = createContext<Dispatch | undefined>(undefined);\n\nfunction todoReducer(state: State, action: Action) {\n  switch (action.type) {\n    case Actions.addTodo: {\n      const todos = [...state, action.payload];\n      window.localStorage.setItem('todos', JSON.stringify(todos));\n      return todos;\n    }\n\n    case Actions.removeTodo: {\n      const todos = state.filter(todo => todo.id !== action.payload);\n      window.localStorage.setItem('todos', JSON.stringify(todos));\n      return todos;\n    }\n\n    case Actions.toggleDone: {\n      const todos = state.map(todo => {\n        if (todo.id === action.payload) {\n          return {\n            ...todo,\n            isDone: !todo.isDone\n          };\n        }\n\n        return todo;\n      });\n      window.localStorage.setItem('todos', JSON.stringify(todos));\n      return todos;\n    }\n\n    default:\n      return state;\n  }\n}\n\nfunction TodoProvider({ children }: TodoProviderProps) {\n  const [state, dispatch] = useReducer(\n    todoReducer,\n    JSON.parse(window.localStorage.getItem('todos')!) || []\n  );\n\n  return (\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        {children}\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  );\n}\n\nfunction useTodoState() {\n  return useContext(TodoStateContext);\n}\n\nfunction useTodoDispatch() {\n  return useContext(TodoDispatchContext);\n}\n\nexport { TodoProvider, TodoStateContext, useTodoState, useTodoDispatch };\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Todo } from '../types';\nimport { useTodoDispatch, Actions } from '../contexts';\nimport checked from '../assets/checked.svg';\n\nexport function SingleTodo({ todo }: { todo: Todo }) {\n  const dispatch = useTodoDispatch();\n\n  function handleRemove() {\n    dispatch!({ type: Actions.removeTodo, payload: todo.id });\n  }\n\n  function handleToggleDone() {\n    dispatch!({ type: Actions.toggleDone, payload: todo.id });\n  }\n\n  return (\n    <Wrapper>\n      <Title isDone={todo.isDone} onClick={handleRemove}>\n        {todo.title}\n      </Title>\n      {todo.isDone ? (\n        <Image onClick={handleToggleDone} src={checked} alt={todo.title} />\n      ) : (\n        <Circle onClick={handleToggleDone} />\n      )}\n    </Wrapper>\n  );\n}\n\ninterface TitleProps {\n  isDone: boolean;\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n`;\n\nconst Title = styled.h2<TitleProps>`\n  color: ${(props: TitleProps) => (props.isDone ? '#999' : '#555')};\n  font-weight: 400;\n  font-size: 20px;\n\n  &:hover {\n    text-decoration: line-through;\n  }\n`;\n\nconst Image = styled.img`\n  cursor: pointer;\n`;\n\nconst Circle = styled.span`\n  position: relative;\n  cursor: pointer;\n\n  &::after {\n    content: '';\n    display: block;\n    width: 32px;\n    height: 32px;\n    border: 2px solid #aaa;\n    border-radius: 50%;\n  }\n`;\n","export enum Colors {\n  white = '#fff',\n  primary = '#2196f3',\n  dark = '#555',\n  lightGray = '#f2f2f2'\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { SingleTodo } from './SingleTodo';\nimport { useTodoState } from '../contexts';\nimport { Colors } from '../contants/colors';\n\nexport function TodosList() {\n  const todos = useTodoState();\n\n  return (\n    <>\n      {todos.length ? (\n        todos.map(todo => <SingleTodo key={todo.id} todo={todo} />)\n      ) : (\n        <Info>Gratz! No todos, go learn React!</Info>\n      )}\n    </>\n  );\n}\n\nconst Info = styled.div`\n  font-size: 18px;\n  font-style: italic;\n  text-align: center;\n  color: ${Colors.dark};\n`;\n","import styled from 'styled-components';\n\nimport { Colors } from '../../../contants/colors';\n\nexport const Input = styled.input`\n  border: 2px solid ${Colors.primary};\n  padding: 20px 20px;\n  border-radius: 5px;\n  color: ${Colors.dark};\n  font-size: 18px;\n  font-family: 'Lacquer', sans-serif;\n  width: 100%;\n\n  &:focus {\n    outline: none;\n  }\n\n  & + label {\n    position: absolute;\n    left: 5px;\n    top: 10px;\n    transition: all 0.4s;\n  }\n\n  &:focus + label,\n  &:not(:placeholder-shown) + label {\n    top: -4px;\n  }\n`;\n","import styled from 'styled-components';\n\nimport { Colors } from '../../../contants/colors';\n\nexport const Label = styled.label`\n  font-size: 12px;\n  font-weight: 700;\n  background: ${Colors.white};\n  padding: 0 4px;\n`;\n","import styled from 'styled-components';\n\nexport const InputGroup = styled.div`\n  position: relative;\n  margin-bottom: 20px;\n`;\n","import styled from 'styled-components';\nimport { Colors } from '../../../contants/colors';\n\nexport const Button = styled.button`\n  background-color: ${Colors.primary};\n  color: ${Colors.white};\n  min-width: 200px;\n  padding: 10px 20px;\n  text-align: center;\n  text-transform: uppercase;\n  font-weight: 700;\n  transition: all 0.4s;\n  border: 2px solid transparent;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 14px;\n\n  &:hover {\n    border: 2px solid ${Colors.primary};\n    color: ${Colors.primary};\n    background-color: ${Colors.white};\n  }\n`;\n","import React, { useRef, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport { Colors } from '../contants/colors';\n\ninterface ModalProps {\n  children: React.ReactNode;\n  isOpen: Boolean;\n  onClose: () => void;\n}\n\nexport function Modal({ children, isOpen, onClose }: ModalProps) {\n  const el = useRef(document.createElement('div'));\n\n  useEffect(() => {\n    const elCopy = el;\n    document.body.appendChild(el.current);\n\n    return () => {\n      document.body.removeChild(elCopy.current);\n    };\n  }, [el]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return ReactDOM.createPortal(\n    <Wrapper>\n      <Inner>\n        {children}\n        <Close onClick={onClose} />\n      </Inner>\n    </Wrapper>,\n    el.current\n  );\n}\n\nconst Wrapper = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: rgba(0, 0, 0, 0.4);\n`;\n\nconst Inner = styled.div`\n  position: relative;\n`;\n\nconst Close = styled.span`\n  &::after,\n  &::before {\n    content: '';\n    width: 2px;\n    height: 20px;\n    background-color: ${Colors.dark};\n    position: absolute;\n    right: 20px;\n    top: 10px;\n    cursor: pointer;\n  }\n\n  &::before {\n    transform: rotate(135deg);\n  }\n\n  &::after {\n    transform: rotate(225deg);\n  }\n`;\n","import styled from 'styled-components';\n\nimport { Colors } from '../../../contants/colors';\nimport plus from '../../../assets/plus.svg';\n\nexport const CircleButton = styled.button`\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  background-color: ${Colors.primary};\n  position: relative;\n  border: unset;\n  background-image: url(${plus});\n  background-repeat: no-repeat;\n  background-position: center center;\n  cursor: pointer;\n`;\n","import React, { useState } from 'react';\nimport uuid from 'uuid';\nimport styled from 'styled-components';\n\nimport { useTodoDispatch, Actions } from '../contexts';\nimport { InputGroup, Label, Input, Button } from './styled';\nimport { Modal } from './Modal';\nimport { CircleButton } from './styled/forms/CircleButton';\nimport { Colors } from '../contants/colors';\n\nexport function TodoForm() {\n  const [title, setTitle] = useState('');\n  const [isModalOpen, setModalOpen] = useState(false);\n  const dispatch = useTodoDispatch();\n\n  function handleModalOpen() {\n    setModalOpen(true);\n  }\n\n  function handleModalClose() {\n    setModalOpen(false);\n  }\n\n  function handleSubmit(e: React.ChangeEvent<HTMLFormElement>): void {\n    e.preventDefault();\n    if (title) {\n      const todo = {\n        title,\n        isDone: false,\n        id: uuid()\n      };\n      setModalOpen(false);\n      setTitle('');\n      dispatch!({\n        type: Actions.addTodo,\n        payload: todo\n      });\n    }\n  }\n\n  return (\n    <>\n      <Modal onClose={handleModalClose} isOpen={isModalOpen}>\n        <Form data-testid=\"form\" onSubmit={handleSubmit}>\n          <InputGroup>\n            <Input\n              value={title}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>): void =>\n                setTitle(e.target.value)\n              }\n              id=\"title\"\n              placeholder=\" \"\n              required\n            />\n            <Label htmlFor=\"title\">Title</Label>\n          </InputGroup>\n          <Button type=\"submit\">Add todo</Button>\n        </Form>\n      </Modal>\n      {!isModalOpen && (\n        <Plus data-testid=\"plus-icon\" onClick={handleModalOpen} />\n      )}\n    </>\n  );\n}\n\nconst Plus = styled(CircleButton)`\n  position: absolute;\n  bottom: -30px;\n  left: 50%;\n  transform: translateX(-50%);\n`;\n\nconst Form = styled.form`\n  padding: 40px;\n  border: 2px solid #f2f2f2;\n  background: ${Colors.white};\n  text-align: center;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Colors } from '../contants/colors';\n\nexport function Header() {\n  const date = new Date();\n  const day = date.getDate();\n  const month = date.toLocaleString('default', { month: 'long' });\n  const year = date.getFullYear();\n  const dayName = date.toLocaleDateString('default', { weekday: 'long' });\n  return (\n    <Wrapper>\n      <Left>\n        <Day>{day}</Day>\n        <div>\n          <Month>{month}</Month>\n          <p>{year}</p>\n        </div>\n      </Left>\n      <DayName>{dayName}</DayName>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${Colors.dark};\n  margin-bottom: 40px;\n`;\n\nconst Left = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst Day = styled.span`\n  font-size: 40px;\n  margin-right: 4px;\n`;\n\nconst Month = styled.p`\n  text-transform: uppercase;\n  font-weight: 700;\n`;\n\nconst DayName = styled.p`\n  text-transform: uppercase;\n  font-weight: 700;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Header, GlobalStyles } from './';\nimport { Colors } from '../contants/colors';\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <Container>\n      <GlobalStyles />\n      <Header />\n      {children}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  width: 400px;\n  height: 600px;\n  margin: 0 auto;\n  background-color: ${Colors.white};\n  padding: 40px;\n  position: relative;\n`;\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { Colors } from '../contants/colors';\n\nconst GlobalStyle = createGlobalStyle`\n  *, *::before, &::after {\n    box-sizing: border-box;\n    margin: 0;\n  }\n\n  body {\n    background-color: ${Colors.lightGray};\n    font-family: 'Lacquer', sans-serif;\n    min-height: 100vh;\n    min-width: 100vw;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n`;\n\nexport function GlobalStyles() {\n  return <GlobalStyle />;\n}\n","import React from 'react';\n\nimport { TodosList, TodoForm, Layout } from './components';\nimport { TodoProvider } from './contexts';\n\nfunction App() {\n  return (\n    <Layout>\n      <TodoProvider>\n        <TodosList />\n        <TodoForm />\n      </TodoProvider>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}